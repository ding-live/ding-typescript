/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as errors from "../errors/index.js";

export type ErrorResponse = {
  /**
   * A machine-readable code that describes the error.
   */
  code?: errors.Code | undefined;
  /**
   * A link to the documentation that describes the error.
   */
  docUrl?: string | undefined;
  /**
   * A human-readable message that describes the error.
   */
  message?: string | undefined;
};

/** @internal */
export const ErrorResponse$inboundSchema: z.ZodType<
  ErrorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: errors.Code$inboundSchema.optional(),
  doc_url: z.string().optional(),
  message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "doc_url": "docUrl",
  });
});

/** @internal */
export type ErrorResponse$Outbound = {
  code?: string | undefined;
  doc_url?: string | undefined;
  message?: string | undefined;
};

/** @internal */
export const ErrorResponse$outboundSchema: z.ZodType<
  ErrorResponse$Outbound,
  z.ZodTypeDef,
  ErrorResponse
> = z.object({
  code: errors.Code$outboundSchema.optional(),
  docUrl: z.string().optional(),
  message: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    docUrl: "doc_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorResponse$ {
  /** @deprecated use `ErrorResponse$inboundSchema` instead. */
  export const inboundSchema = ErrorResponse$inboundSchema;
  /** @deprecated use `ErrorResponse$outboundSchema` instead. */
  export const outboundSchema = ErrorResponse$outboundSchema;
  /** @deprecated use `ErrorResponse$Outbound` instead. */
  export type Outbound = ErrorResponse$Outbound;
}

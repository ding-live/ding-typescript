/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The status of the retry. Possible values are:
 *
 * @remarks
 *   * `approved` - The retry was approved and a new code was sent.
 *   * `denied` - The retry was denied.
 *   * `no_attempt` - No attempt was sent yet, so a retry cannot be completed.
 *   * `rate_limited` - The authentication was rate limited and cannot be retried.
 *   * `expired_auth` - The authentication has expired and cannot be retried.
 *   * `already_validated` - The authentication has already been validated.
 *
 */
export const RetryAuthenticationResponseStatus = {
    Approved: "approved",
    Denied: "denied",
    NoAttempt: "no_attempt",
    RateLimited: "rate_limited",
    ExpiredAuth: "expired_auth",
    AlreadyValidated: "already_validated",
} as const;
/**
 * The status of the retry. Possible values are:
 *
 * @remarks
 *   * `approved` - The retry was approved and a new code was sent.
 *   * `denied` - The retry was denied.
 *   * `no_attempt` - No attempt was sent yet, so a retry cannot be completed.
 *   * `rate_limited` - The authentication was rate limited and cannot be retried.
 *   * `expired_auth` - The authentication has expired and cannot be retried.
 *   * `already_validated` - The authentication has already been validated.
 *
 */
export type RetryAuthenticationResponseStatus = ClosedEnum<
    typeof RetryAuthenticationResponseStatus
>;

export type RetryAuthenticationResponse = {
    /**
     * The UUID of the corresponding authentication.
     */
    authenticationUuid?: string | undefined;
    createdAt?: Date | undefined;
    /**
     * The time at which the next retry will be available.
     */
    nextRetryAt?: Date | undefined;
    /**
     * The number of remaining retries.
     */
    remainingRetry?: number | undefined;
    /**
     * The status of the retry. Possible values are:
     *
     * @remarks
     *   * `approved` - The retry was approved and a new code was sent.
     *   * `denied` - The retry was denied.
     *   * `no_attempt` - No attempt was sent yet, so a retry cannot be completed.
     *   * `rate_limited` - The authentication was rate limited and cannot be retried.
     *   * `expired_auth` - The authentication has expired and cannot be retried.
     *   * `already_validated` - The authentication has already been validated.
     *
     */
    status?: RetryAuthenticationResponseStatus | undefined;
};

/** @internal */
export const RetryAuthenticationResponseStatus$inboundSchema: z.ZodNativeEnum<
    typeof RetryAuthenticationResponseStatus
> = z.nativeEnum(RetryAuthenticationResponseStatus);

/** @internal */
export const RetryAuthenticationResponseStatus$outboundSchema: z.ZodNativeEnum<
    typeof RetryAuthenticationResponseStatus
> = RetryAuthenticationResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryAuthenticationResponseStatus$ {
    /** @deprecated use `RetryAuthenticationResponseStatus$inboundSchema` instead. */
    export const inboundSchema = RetryAuthenticationResponseStatus$inboundSchema;
    /** @deprecated use `RetryAuthenticationResponseStatus$outboundSchema` instead. */
    export const outboundSchema = RetryAuthenticationResponseStatus$outboundSchema;
}

/** @internal */
export const RetryAuthenticationResponse$inboundSchema: z.ZodType<
    RetryAuthenticationResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        authentication_uuid: z.string().optional(),
        created_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        next_retry_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v))
            .optional(),
        remaining_retry: z.number().int().optional(),
        status: RetryAuthenticationResponseStatus$inboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            authentication_uuid: "authenticationUuid",
            created_at: "createdAt",
            next_retry_at: "nextRetryAt",
            remaining_retry: "remainingRetry",
        });
    });

/** @internal */
export type RetryAuthenticationResponse$Outbound = {
    authentication_uuid?: string | undefined;
    created_at?: string | undefined;
    next_retry_at?: string | undefined;
    remaining_retry?: number | undefined;
    status?: string | undefined;
};

/** @internal */
export const RetryAuthenticationResponse$outboundSchema: z.ZodType<
    RetryAuthenticationResponse$Outbound,
    z.ZodTypeDef,
    RetryAuthenticationResponse
> = z
    .object({
        authenticationUuid: z.string().optional(),
        createdAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        nextRetryAt: z
            .date()
            .transform((v) => v.toISOString())
            .optional(),
        remainingRetry: z.number().int().optional(),
        status: RetryAuthenticationResponseStatus$outboundSchema.optional(),
    })
    .transform((v) => {
        return remap$(v, {
            authenticationUuid: "authentication_uuid",
            createdAt: "created_at",
            nextRetryAt: "next_retry_at",
            remainingRetry: "remaining_retry",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryAuthenticationResponse$ {
    /** @deprecated use `RetryAuthenticationResponse$inboundSchema` instead. */
    export const inboundSchema = RetryAuthenticationResponse$inboundSchema;
    /** @deprecated use `RetryAuthenticationResponse$outboundSchema` instead. */
    export const outboundSchema = RetryAuthenticationResponse$outboundSchema;
    /** @deprecated use `RetryAuthenticationResponse$Outbound` instead. */
    export type Outbound = RetryAuthenticationResponse$Outbound;
}

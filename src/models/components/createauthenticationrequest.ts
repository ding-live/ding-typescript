/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";
import * as z from "zod";

/**
 * The type of device the user is using.
 */
export const DeviceType = {
    Ios: "IOS",
    Android: "ANDROID",
    Web: "WEB",
} as const;
/**
 * The type of device the user is using.
 */
export type DeviceType = ClosedEnum<typeof DeviceType>;

export type CreateAuthenticationRequest = {
    /**
     * The Android SMS Retriever API hash code that identifies your app. This allows you to automatically retrieve and fill the OTP code on Android devices.
     */
    appRealm?: string | undefined;
    /**
     * The version of your application.
     */
    appVersion?: string | undefined;
    /**
     * A webhook URL to which delivery statuses will be sent.
     */
    callbackUrl?: string | undefined;
    /**
     * A unique, user-defined identifier that will be included in webhook events
     */
    correlationId?: string | undefined;
    /**
     * Your customer UUID, which can be found in the API settings in the dashboard.
     */
    customerUuid: string;
    /**
     * Unique identifier for the user's device. For Android, this corresponds to the `ANDROID_ID` and for iOS, this corresponds to the `identifierForVendor`.
     */
    deviceId?: string | undefined;
    /**
     * The model of the user's device.
     */
    deviceModel?: string | undefined;
    /**
     * The type of device the user is using.
     */
    deviceType?: DeviceType | undefined;
    /**
     * The IP address of the user's device.
     */
    ip?: string | undefined;
    /**
     * Whether the user is a returning user on your app.
     */
    isReturningUser?: boolean | undefined;
    /**
     * The version of the user's device operating system.
     */
    osVersion?: string | undefined;
    /**
     * An E.164 formatted phone number to send the OTP to.
     */
    phoneNumber: string;
    /**
     * The template id associated with the message content variant to be sent.
     */
    templateId?: string | undefined;
};

/** @internal */
export const DeviceType$inboundSchema: z.ZodNativeEnum<typeof DeviceType> =
    z.nativeEnum(DeviceType);

/** @internal */
export const DeviceType$outboundSchema: z.ZodNativeEnum<typeof DeviceType> =
    DeviceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeviceType$ {
    /** @deprecated use `DeviceType$inboundSchema` instead. */
    export const inboundSchema = DeviceType$inboundSchema;
    /** @deprecated use `DeviceType$outboundSchema` instead. */
    export const outboundSchema = DeviceType$outboundSchema;
}

/** @internal */
export const CreateAuthenticationRequest$inboundSchema: z.ZodType<
    CreateAuthenticationRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        app_realm: z.string().optional(),
        app_version: z.string().optional(),
        callback_url: z.string().optional(),
        correlation_id: z.string().optional(),
        customer_uuid: z.string(),
        device_id: z.string().optional(),
        device_model: z.string().optional(),
        device_type: DeviceType$inboundSchema.optional(),
        ip: z.string().optional(),
        is_returning_user: z.boolean().optional(),
        os_version: z.string().optional(),
        phone_number: z.string(),
        template_id: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            app_realm: "appRealm",
            app_version: "appVersion",
            callback_url: "callbackUrl",
            correlation_id: "correlationId",
            customer_uuid: "customerUuid",
            device_id: "deviceId",
            device_model: "deviceModel",
            device_type: "deviceType",
            is_returning_user: "isReturningUser",
            os_version: "osVersion",
            phone_number: "phoneNumber",
            template_id: "templateId",
        });
    });

/** @internal */
export type CreateAuthenticationRequest$Outbound = {
    app_realm?: string | undefined;
    app_version?: string | undefined;
    callback_url?: string | undefined;
    correlation_id?: string | undefined;
    customer_uuid: string;
    device_id?: string | undefined;
    device_model?: string | undefined;
    device_type?: string | undefined;
    ip?: string | undefined;
    is_returning_user?: boolean | undefined;
    os_version?: string | undefined;
    phone_number: string;
    template_id?: string | undefined;
};

/** @internal */
export const CreateAuthenticationRequest$outboundSchema: z.ZodType<
    CreateAuthenticationRequest$Outbound,
    z.ZodTypeDef,
    CreateAuthenticationRequest
> = z
    .object({
        appRealm: z.string().optional(),
        appVersion: z.string().optional(),
        callbackUrl: z.string().optional(),
        correlationId: z.string().optional(),
        customerUuid: z.string(),
        deviceId: z.string().optional(),
        deviceModel: z.string().optional(),
        deviceType: DeviceType$outboundSchema.optional(),
        ip: z.string().optional(),
        isReturningUser: z.boolean().optional(),
        osVersion: z.string().optional(),
        phoneNumber: z.string(),
        templateId: z.string().optional(),
    })
    .transform((v) => {
        return remap$(v, {
            appRealm: "app_realm",
            appVersion: "app_version",
            callbackUrl: "callback_url",
            correlationId: "correlation_id",
            customerUuid: "customer_uuid",
            deviceId: "device_id",
            deviceModel: "device_model",
            deviceType: "device_type",
            isReturningUser: "is_returning_user",
            osVersion: "os_version",
            phoneNumber: "phone_number",
            templateId: "template_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticationRequest$ {
    /** @deprecated use `CreateAuthenticationRequest$inboundSchema` instead. */
    export const inboundSchema = CreateAuthenticationRequest$inboundSchema;
    /** @deprecated use `CreateAuthenticationRequest$outboundSchema` instead. */
    export const outboundSchema = CreateAuthenticationRequest$outboundSchema;
    /** @deprecated use `CreateAuthenticationRequest$Outbound` instead. */
    export type Outbound = CreateAuthenticationRequest$Outbound;
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The status of the authentication. Possible values are:
 *
 * @remarks
 *   * `pending` - The OTP code is being sent.
 *   * `rate_limited` - This user is rate-limited and cannot receive another code.
 *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
 */
export const Status = {
  Pending: "pending",
  RateLimited: "rate_limited",
  SpamDetected: "spam_detected",
} as const;
/**
 * The status of the authentication. Possible values are:
 *
 * @remarks
 *   * `pending` - The OTP code is being sent.
 *   * `rate_limited` - This user is rate-limited and cannot receive another code.
 *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
 */
export type Status = ClosedEnum<typeof Status>;

/**
 * A successful response to an authentication creation request.
 */
export type CreateAuthenticationResponse = {
  /**
   * A unique identifier for the authentication that you can use on the /check and /retry endpoints.
   */
  authenticationUuid?: string | undefined;
  createdAt?: Date | undefined;
  /**
   * The time at which the authentication expires and can no longer be checked or retried.
   */
  expiresAt?: Date | undefined;
  /**
   * The status of the authentication. Possible values are:
   *
   * @remarks
   *   * `pending` - The OTP code is being sent.
   *   * `rate_limited` - This user is rate-limited and cannot receive another code.
   *   * `spam_detected` - This attempt is flagged as spam. Go to the dashboard for more details.
   */
  status?: Status | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const CreateAuthenticationResponse$inboundSchema: z.ZodType<
  CreateAuthenticationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  authentication_uuid: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  expires_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  status: Status$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "authentication_uuid": "authenticationUuid",
    "created_at": "createdAt",
    "expires_at": "expiresAt",
  });
});

/** @internal */
export type CreateAuthenticationResponse$Outbound = {
  authentication_uuid?: string | undefined;
  created_at?: string | undefined;
  expires_at?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const CreateAuthenticationResponse$outboundSchema: z.ZodType<
  CreateAuthenticationResponse$Outbound,
  z.ZodTypeDef,
  CreateAuthenticationResponse
> = z.object({
  authenticationUuid: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  expiresAt: z.date().transform(v => v.toISOString()).optional(),
  status: Status$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    authenticationUuid: "authentication_uuid",
    createdAt: "created_at",
    expiresAt: "expires_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateAuthenticationResponse$ {
  /** @deprecated use `CreateAuthenticationResponse$inboundSchema` instead. */
  export const inboundSchema = CreateAuthenticationResponse$inboundSchema;
  /** @deprecated use `CreateAuthenticationResponse$outboundSchema` instead. */
  export const outboundSchema = CreateAuthenticationResponse$outboundSchema;
  /** @deprecated use `CreateAuthenticationResponse$Outbound` instead. */
  export type Outbound = CreateAuthenticationResponse$Outbound;
}

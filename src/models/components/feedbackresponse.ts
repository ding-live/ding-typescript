/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeedbackResponse = {
  /**
   * The UUID of the feedback.
   */
  uuid?: string | undefined;
};

/** @internal */
export const FeedbackResponse$inboundSchema: z.ZodType<
  FeedbackResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type FeedbackResponse$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const FeedbackResponse$outboundSchema: z.ZodType<
  FeedbackResponse$Outbound,
  z.ZodTypeDef,
  FeedbackResponse
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackResponse$ {
  /** @deprecated use `FeedbackResponse$inboundSchema` instead. */
  export const inboundSchema = FeedbackResponse$inboundSchema;
  /** @deprecated use `FeedbackResponse$outboundSchema` instead. */
  export const outboundSchema = FeedbackResponse$outboundSchema;
  /** @deprecated use `FeedbackResponse$Outbound` instead. */
  export type Outbound = FeedbackResponse$Outbound;
}

export function feedbackResponseToJSON(
  feedbackResponse: FeedbackResponse,
): string {
  return JSON.stringify(
    FeedbackResponse$outboundSchema.parse(feedbackResponse),
  );
}

export function feedbackResponseFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackResponse' from JSON`,
  );
}

/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RetryAuthenticationRequest = {
  /**
   * The authentication UUID that was returned when you created the authentication.
   */
  authenticationUuid: string;
  /**
   * Your customer UUID, which can be found in the API settings in the dashboard.
   */
  customerUuid: string;
};

/** @internal */
export const RetryAuthenticationRequest$inboundSchema: z.ZodType<
  RetryAuthenticationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  authentication_uuid: z.string(),
  customer_uuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "authentication_uuid": "authenticationUuid",
    "customer_uuid": "customerUuid",
  });
});

/** @internal */
export type RetryAuthenticationRequest$Outbound = {
  authentication_uuid: string;
  customer_uuid: string;
};

/** @internal */
export const RetryAuthenticationRequest$outboundSchema: z.ZodType<
  RetryAuthenticationRequest$Outbound,
  z.ZodTypeDef,
  RetryAuthenticationRequest
> = z.object({
  authenticationUuid: z.string(),
  customerUuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    authenticationUuid: "authentication_uuid",
    customerUuid: "customer_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RetryAuthenticationRequest$ {
  /** @deprecated use `RetryAuthenticationRequest$inboundSchema` instead. */
  export const inboundSchema = RetryAuthenticationRequest$inboundSchema;
  /** @deprecated use `RetryAuthenticationRequest$outboundSchema` instead. */
  export const outboundSchema = RetryAuthenticationRequest$outboundSchema;
  /** @deprecated use `RetryAuthenticationRequest$Outbound` instead. */
  export type Outbound = RetryAuthenticationRequest$Outbound;
}

export function retryAuthenticationRequestToJSON(
  retryAuthenticationRequest: RetryAuthenticationRequest,
): string {
  return JSON.stringify(
    RetryAuthenticationRequest$outboundSchema.parse(retryAuthenticationRequest),
  );
}

export function retryAuthenticationRequestFromJSON(
  jsonString: string,
): SafeParseResult<RetryAuthenticationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RetryAuthenticationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RetryAuthenticationRequest' from JSON`,
  );
}
